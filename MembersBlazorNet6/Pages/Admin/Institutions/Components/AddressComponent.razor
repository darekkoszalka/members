@inject NavigationManager _navigationManager

    <RadzenCard>
        <h4>Adres</h4>

        @if (UnionInstitutionAddress != null)
        {

            @if (UnionInstitutionAddress.ApartamentNumber != null && UnionInstitutionAddress.ApartamentNumber != "")
            {
    <p><span class="text-primary"><RadzenIcon Icon="home" /></span> @UnionInstitutionAddress.Street @UnionInstitutionAddress.HouseNumber/@UnionInstitutionAddress.ApartamentNumber</p>
            }
            else
            {
                <p><span class="text-primary"><RadzenIcon Icon="home" /></span>@UnionInstitutionAddress.Street @UnionInstitutionAddress.HouseNumber</p>
            }
            <p>@UnionInstitutionAddress.PostCode @UnionInstitutionAddress.City</p>
            <small class="text-secondary mt-2">Poczta</small>
            <p>@UnionInstitutionAddress.PostCity</p>
            <div class="col-sm-6 mt-3">
                <RadzenButton Text="Edytuj" Click="@(args => EditAddress(UnionInstitutionAddress.Id))" ButtonStyle="ButtonStyle.Secondary" />
            </div>
        }
        else
        {
            <div class="col-sm-6 mt-3">
                <RadzenButton Text="Dodaj" Click="@(() => AddAddess.InvokeAsync(UnionInstitution.Id))" ButtonStyle="ButtonStyle.Secondary" />
            </div>
        }
    </RadzenCard>


@code {
    [Parameter]
    public UnionInstitution UnionInstitution { get; set; }

    [Parameter]
    public UnionInstitutionAddress UnionInstitutionAddress { get; set; }

    [Parameter] public EventCallback<int>  AddAddess{ get; set; }


    async Task AddAddress(int Id)
    {
        _navigationManager.NavigateTo($"/admin/unionInstitutions/addressCreate/{Id}");
    }

    async Task EditAddress(int Id)
    {
        _navigationManager.NavigateTo($"/admin/unionInstitutions/addressEdit/{UnionInstitutionAddress.Id}");
    }
}

