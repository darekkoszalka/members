@page "/admin/unionInstitutions/addressCreate/{unionInstitutionId:int}"
@page "/admin/unionInstitutions/addressEdit/{unionInstitutionAddressId:int}"
@inject IDbContextFactory<ApplicationDbContext> _contextFactory
@inject NotificationService _notificationService
@inject NavigationManager _navigationManager

<div class="container">
    @if (ProgressBarVisible)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <Breadcrumb Title="@Title" />
        <div class="row mt-5">
            <div class="col-sm-8 offset-sm-2">
                <div class="card p-5">
                    
                    <h4 class="text-center text-secondary mb-3">@UnionInstitution.FullName</h4>
                    <EditForm Model="@UnionInstitutionAddress" OnValidSubmit="@Upsert">

                        <DataAnnotationsValidator />

                        <div class="form-group row">
                            <div class="col-sm-6">
                                <small class="text-secondary d-block">Ulica</small>
                                <RadzenTextBox @bind-Value="UnionInstitutionAddress.Street" Placeholder="np. Michaela Jacksona" Class="form-control" />
                                <ValidationMessage For="() => UnionInstitutionAddress.Street" />
                            </div>
                            <div class="col-sm-3">
                                <small class="text-secondary d-block">nr domu</small>
                                <RadzenTextBox @bind-Value="UnionInstitutionAddress.HouseNumber" Placeholder="np.12m" Class="form-control" />
                                <ValidationMessage For="() => UnionInstitutionAddress.HouseNumber" />
                            </div>
                            <div class="col-sm-3">
                                <small class="text-secondary d-block">nr lok.</small>
                                <RadzenTextBox @bind-Value="UnionInstitutionAddress.ApartamentNumber" Placeholder="np.10" Class="form-control" />
                            </div>

                        </div>
                        <div class="form-group row">
                            <div class="col-sm-2">
                                <small class="text-secondary d-block">Kod pocztowy</small>
                                <RadzenMask @bind-Value="UnionInstitutionAddress.PostCode" Mask="**-***" CharacterPattern="[0-9]" Placeholder="00-000" Class="form-control" />
                                <ValidationMessage For="() => UnionInstitutionAddress.PostCode" />
                            </div>
                            <div class="col-sm-5">
                                <small class="text-secondary d-block">Miejscowość</small>
                                <RadzenTextBox @bind-Value="UnionInstitutionAddress.City" Placeholder="np.Wawrzeńczyce Duże" Class="form-control" />
                                <ValidationMessage For="() => UnionInstitutionAddress.City" />
                            </div>
                            <div class="col-sm-5">
                                <small class="text-secondary d-block">Poczta</small>
                                <RadzenTextBox @bind-Value="UnionInstitutionAddress.PostCity" Placeholder="np.Wawrzeńczyce" Class="form-control" />
                                <ValidationMessage For="() => UnionInstitutionAddress.PostCity" />
                            </div>

                        </div>
                        <div class="mt-3">
                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Zapisz" />
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Anuluj" Click="@(args => BackToDetails(UnionInstitution.Id))" />

                        </div>

                    </EditForm>
                </div>

            </div>

        </div>
    }
</div>




@code {

    [Parameter]
    public int? unionInstitutionId { get; set; }

    [Parameter]
    public int? unionInstitutionAddressId { get; set; }

    public bool ProgressBarVisible { get; set; }

    private string Title = "";


    public UnionInstitution UnionInstitution { get; set; }

    public UnionInstitutionAddress UnionInstitutionAddress { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProgressBarVisible = true;
        if (unionInstitutionId != null)
        {
            Title = "Dodaj adres";
            UnionInstitutionAddress = new UnionInstitutionAddress();
            UnionInstitution = new UnionInstitution();
            using (var _context = _contextFactory.CreateDbContext())
            {
                UnionInstitution = await _context.UnionInstitution.FirstOrDefaultAsync(u => u.Id == unionInstitutionId);
            }

        }
        else
        {
            Title = "Edytuj adres";

            using(var _context = _contextFactory.CreateDbContext())
            {
                UnionInstitutionAddress = await _context.UnionInstitutionAddress
                .FirstOrDefaultAsync(a => a.Id == unionInstitutionAddressId);

                UnionInstitution = await _context.UnionInstitution.FirstOrDefaultAsync(u => u.Id == UnionInstitutionAddress.UnionInstitutionId);
            }


        }

        ProgressBarVisible = false;
    }

    async Task Upsert()
    {
        if (Title == "Dodaj adres")
        {
            UnionInstitutionAddress.UnionInstitutionId = UnionInstitution.Id;

            using(var _context = _contextFactory.CreateDbContext())
            {
                _context.UnionInstitutionAddress.Add(UnionInstitutionAddress);

                await _context.SaveChangesAsync();
            }


            _notificationService.Notify(NotificationSeverity.Success, "Sukces", "Pomyślnie dodano adres.", 3000);
            _navigationManager.NavigateTo($"/admin/unionInstitutions/Details/{UnionInstitutionAddress.UnionInstitutionId}");
        }
        else
        {
            using(var _context = _contextFactory.CreateDbContext())
            {
                _context.UnionInstitutionAddress.Update(UnionInstitutionAddress);

                await _context.SaveChangesAsync();
            }


            _notificationService.Notify(NotificationSeverity.Success, "Sukces", "Dane zostały zaktualizowane", 3000);
            _navigationManager.NavigateTo($"/admin/unionInstitutions/Details/{UnionInstitutionAddress.UnionInstitutionId}");
        }


    }

    async Task BackToDetails(int Id)
    {
        _navigationManager.NavigateTo($"/admin/unionInstitutions/Details/{Id}");
    }


}

